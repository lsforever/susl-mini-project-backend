// Add logger (Winstona and morgan) 
// Add response generator and error specifier. (file ewith respose codes etc)
// Add validators
// Error handler

// add Compression

 ==================
// npm readme global //// generator-standard-readme
// npm readme /////   node-readme | readme-project-generator
// npm @appnest/readme /////  readme gen
https://www.npmjs.com/package/@appnest/readme#-featured-readmes
=====================

 pnpm i --save-dev readme-project-generator


 //TODO add rate limiters (add redis part) (Add custom limitters for user creation)  |||||| upstash , nested

 // change api docs theme skins
 



// TODO error handleing ... add error handler



// TODO **********************************
01. error handling (default express handle, handler middleware, central handler) - adding logger and respose in error with eror codes in http (2 npm express packges error handler, excepetion handler)
02. Respose Handler or middlewarer...
02. Add authentication


///// error handling
https://stackabuse.com/guide-to-exception-handling-in-express/
https://dev.to/qbentil/how-to-write-custom-error-handler-middleware-in-expressjs-using-javascript-29j1
https://www.toptal.com/nodejs/node-js-error-handling
///// error handling
https://www.npmjs.com/package/express-exception-handler
https://www.npmjs.com/package/express-error-handler
https://stackoverflow.com/questions/42611707/nodejs-best-practices-for-catching-errors
https://stackoverflow.com/questions/72716474/what-is-the-best-practice-to-handle-errors-in-express
////// error handling architecture
https://youtu.be/1kIWRxcW_dU
https://www.youtube.com/watch?v=WXa1yzLR3hw



//routes
https://www.freecodecamp.org/news/rest-api-design-best-practices-build-a-rest-api/#architecture


// https://github.com/manojjha86/NODE-JS/tree/main/NODE-JS-Basics



//openapi 
https://github.com/Rishabh570/nodejs-openapi-spec/blob/main/src/app.js


///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
//// SWAG definitions generator for example json data (2 solutions)
01. https://roger13.github.io/SwagDefGen/
02. npm install --global mock-to-openapi  ||||| mock-to-openapi ./examples
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////





///JWT ///////////////////
Private claims are optional, and are any claims that don't fall under the registered or public claims categories.
"sub" is the subject of the JWT, and is usually a unique identifying string for a user in an application, usually an email address, username, or id. Subjects are registered claims.
"name" is the full name of the user who was issued the JWT, and is a public claim.
"iat" is the "issued at" date for the token, and is a registered claim.
///JWT ///////////////////




// TODO send 404 for all not found end points
// TODO add security to endpoints in docs


//TODO do the api versioning



// TODO clear app.js by making a loader for the server .remove unnecsary items to load file.



// todo add cashing

//pagination sort filter
https://jeffdevslife.com/p/1-mongodb-query-of-advanced-filtering-sorting-limit-field-and-pagination-with-mongoose/





///Query Selector Injection Attacks
sanitize monogodb query "sanitizeFilter"


// set the trust proxy ... middleware


// express-recaptcha 
To limit rate limit and user registration frequency....


// Mobile phone number verification with twilio
https://www.twilio.com/blog/verify-phone-numbers-with-node-js-using-twilio-sms-express-and-socket-io-html




// https://tx.shadcn.com/ for a fullstack way

















///////////////////////////////////////
// 02 getList	                        GET     http://my.api.url/posts?sort=["title","ASC"]&range=[0, 24]&filter={"title":"bar"}
// 02 getMany	                        GET     http://my.api.url/posts?filter={"_id":[123,456,789]}
// 02 getManyReference	                GET     http://my.api.url/posts?filter={"author_id":345}
// 03 getOne	                        GET     http://my.api.url/posts/123
// 01 // create	                        POST    http://my.api.url/posts
// 04 update	                        PUT     http://my.api.url/posts/123
// 04 updateMany(Multiple calls to)     PUT     http://my.api.url/posts/123
// 05 delete	                        DELETE  http://my.api.url/posts/123
// 06 deleteMany(Filter calls to)       DELETE  http://my.api.url/posts/123
//////////////////////////////